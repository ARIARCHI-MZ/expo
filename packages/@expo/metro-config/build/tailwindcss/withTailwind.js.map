{"version":3,"file":"withTailwind.js","names":["_path","data","_interopRequireDefault","require","_build","obj","__esModule","default","withTailwind","config","cssPathname","input","path","relative","process","cwd","output","resolve","getTransformOptions","entryPoints","options","getDependenciesOf","_config$transformer","_config$transformer$g","stdout","clearLine","twBuild","dev","transformer","call","resolver","sourceExts","Array","from","Set","extname","transformerPath","cssInterop","externallyManagedCss"],"sources":["../../src/tailwindcss/withTailwind.ts"],"sourcesContent":["import type { ConfigT } from 'metro-config';\nimport path from 'path';\nimport { build as twBuild } from 'tailwindcss/lib/cli/build';\n\nimport type { ExpoJsTransformerConfig } from '../transform-worker/transform-worker';\n\ntype TailwindConfigT = ConfigT & { transformer: ExpoJsTransformerConfig };\n\nexport function withTailwind(\n  config: TailwindConfigT,\n  cssPathname = './global.css',\n  {\n    input = path.relative(process.cwd(), cssPathname),\n    output = path.resolve(process.cwd(), 'node_modules/.cache/expo/', cssPathname),\n  } = {}\n): TailwindConfigT {\n  const getTransformOptions = async (entryPoints: any, options: any, getDependenciesOf: any) => {\n    process.stdout.clearLine(0);\n\n    await twBuild({\n      '--input': input,\n      '--output': output,\n      '--watch': options.dev ? 'always' : false,\n      '--poll': true,\n    });\n\n    return config.transformer?.getTransformOptions?.(entryPoints, options, getDependenciesOf);\n  };\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      sourceExts: Array.from(new Set([...config.resolver.sourceExts, path.extname(cssPathname)])),\n    },\n    transformerPath: require.resolve('@expo/metro-config/transformer'),\n    transformer: {\n      ...config.transformer,\n      getTransformOptions,\n      cssInterop: true,\n      externallyManagedCss: {\n        ...config.transformer.externallyManagedCss,\n        [input]: output,\n      },\n    },\n  };\n}\n"],"mappings":";;;;;;AACA,SAAAA,MAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,KAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,OAAA;EAAA,MAAAH,IAAA,GAAAE,OAAA;EAAAC,MAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA6D,SAAAC,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAMtD,SAASG,YAAYA,CAC1BC,MAAuB,EACvBC,WAAW,GAAG,cAAc,EAC5B;EACEC,KAAK,GAAGC,eAAI,CAACC,QAAQ,CAACC,OAAO,CAACC,GAAG,EAAE,EAAEL,WAAW,CAAC;EACjDM,MAAM,GAAGJ,eAAI,CAACK,OAAO,CAACH,OAAO,CAACC,GAAG,EAAE,EAAE,2BAA2B,EAAEL,WAAW;AAC/E,CAAC,GAAG,CAAC,CAAC,EACW;EACjB,MAAMQ,mBAAmB,GAAG,MAAAA,CAAOC,WAAgB,EAAEC,OAAY,EAAEC,iBAAsB,KAAK;IAAA,IAAAC,mBAAA,EAAAC,qBAAA;IAC5FT,OAAO,CAACU,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC;IAE3B,MAAM,IAAAC,cAAO,EAAC;MACZ,SAAS,EAAEf,KAAK;MAChB,UAAU,EAAEK,MAAM;MAClB,SAAS,EAAEI,OAAO,CAACO,GAAG,GAAG,QAAQ,GAAG,KAAK;MACzC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,QAAAL,mBAAA,GAAOb,MAAM,CAACmB,WAAW,cAAAN,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAoBJ,mBAAmB,cAAAK,qBAAA,uBAAvCA,qBAAA,CAAAM,IAAA,CAAAP,mBAAA,EAA0CH,WAAW,EAAEC,OAAO,EAAEC,iBAAiB,CAAC;EAC3F,CAAC;EAED,OAAO;IACL,GAAGZ,MAAM;IACTqB,QAAQ,EAAE;MACR,GAAGrB,MAAM,CAACqB,QAAQ;MAClBC,UAAU,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC,CAAC,GAAGzB,MAAM,CAACqB,QAAQ,CAACC,UAAU,EAAEnB,eAAI,CAACuB,OAAO,CAACzB,WAAW,CAAC,CAAC,CAAC;IAC5F,CAAC;IACD0B,eAAe,EAAEjC,OAAO,CAACc,OAAO,CAAC,gCAAgC,CAAC;IAClEW,WAAW,EAAE;MACX,GAAGnB,MAAM,CAACmB,WAAW;MACrBV,mBAAmB;MACnBmB,UAAU,EAAE,IAAI;MAChBC,oBAAoB,EAAE;QACpB,GAAG7B,MAAM,CAACmB,WAAW,CAACU,oBAAoB;QAC1C,CAAC3B,KAAK,GAAGK;MACX;IACF;EACF,CAAC;AACH"}