{"version":3,"file":"container-queries.test.js","sourceRoot":"","sources":["../../src/__tests__/container-queries.test.tsx"],"names":[],"mappings":";;;;;AAAA,gEAA0E;AAC1E,kDAA0B;AAE1B,6DAA0D;AAC1D,mCAA2D;AAE3D,MAAM,MAAM,GAAG,IAAA,2BAAmB,GAAE,CAAC;AACrC,MAAM,KAAK,GAAG,IAAA,2BAAmB,GAAE,CAAC;AAEpC,UAAU,CAAC,GAAG,EAAE;IACd,uBAAU,CAAC,OAAO,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACvB,IAAA,mBAAW,EAAC;;;;;;;;;;;;;;;KAeX,CAAC,CAAC;QAEH,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAA,qBAAM,EACzB,8BAAC,MAAM,IAAC,MAAM,EAAC,QAAQ,EAAC,SAAS,EAAC,WAAW;YAC3C,8BAAC,KAAK,IAAC,SAAS,EAAC,OAAO,GAAG,CACpB,CACV,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,qBAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;YAC1B,KAAK,EAAE,GAAG;SACX,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC;YACzB,KAAK,EAAE,oBAAoB;SAC5B,CAAC,CAAC;QAEH,IAAA,wBAAS,EAAC,MAAM,EAAE,QAAQ,EAAE;YAC1B,WAAW,EAAE;gBACX,MAAM,EAAE;oBACN,KAAK,EAAE,GAAG;oBACV,MAAM,EAAE,GAAG;iBACZ;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC;YACzB,KAAK,EAAE,oBAAoB;SAC5B,CAAC,CAAC;QAEH,QAAQ,CACN,8BAAC,MAAM,IAAC,SAAS,EAAC,WAAW,EAAC,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE;YACjD,8BAAC,KAAK,IAAC,SAAS,EAAC,OAAO,GAAG,CACpB,CACV,CAAC;QAEF,IAAA,wBAAS,EAAC,MAAM,EAAE,QAAQ,EAAE;YAC1B,WAAW,EAAE;gBACX,MAAM,EAAE;oBACN,KAAK,EAAE,GAAG;oBACV,MAAM,EAAE,GAAG;iBACZ;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;YAC1B,KAAK,EAAE,GAAG;SACX,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC;YACzB,KAAK,EAAE,oBAAoB;SAC5B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { fireEvent, render, screen } from \"@testing-library/react-native\";\nimport React from \"react\";\n\nimport { StyleSheet } from \"../runtime/native/stylesheet\";\nimport { createMockComponent, registerCSS } from \"./utils\";\n\nconst Parent = createMockComponent();\nconst Child = createMockComponent();\n\nbeforeEach(() => {\n  StyleSheet.__reset();\n});\n\ndescribe(\"size\", () => {\n  test(\"width\", async () => {\n    registerCSS(`\n      .container { \n        container-name: test; \n        width: 200px;\n      }\n\n      .child {\n        color: red;\n      }\n\n      @container (width > 400px) {\n        .child {\n          color: blue;\n        }\n      }\n    `);\n\n    const { rerender } = render(\n      <Parent testID=\"parent\" className=\"container\">\n        <Child className=\"child\" />\n      </Parent>\n    );\n\n    const parent = await screen.findByTestId(\"parent\");\n\n    expect(Parent).styleToEqual({\n      width: 200,\n    });\n\n    expect(Child).styleToEqual({\n      color: \"rgba(255, 0, 0, 1)\",\n    });\n\n    fireEvent(parent, \"layout\", {\n      nativeEvent: {\n        layout: {\n          width: 200,\n          height: 200,\n        },\n      },\n    });\n\n    expect(Child).styleToEqual({\n      color: \"rgba(255, 0, 0, 1)\",\n    });\n\n    rerender(\n      <Parent className=\"container\" style={{ width: 500 }}>\n        <Child className=\"child\" />\n      </Parent>\n    );\n\n    fireEvent(parent, \"layout\", {\n      nativeEvent: {\n        layout: {\n          width: 500,\n          height: 200,\n        },\n      },\n    });\n\n    expect(Parent).styleToEqual({\n      width: 500,\n    });\n\n    expect(Child).styleToEqual({\n      color: \"rgba(0, 0, 255, 1)\",\n    });\n  });\n});\n"]}