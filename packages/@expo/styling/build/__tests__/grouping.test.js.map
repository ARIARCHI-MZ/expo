{"version":3,"file":"grouping.test.js","sourceRoot":"","sources":["../../src/__tests__/grouping.test.tsx"],"names":[],"mappings":";;;;;AAAA,gEAAuD;AACvD,kDAA0B;AAE1B,6DAA0D;AAC1D,mCAA2D;AAE3D,SAAS,CAAC,GAAG,EAAE;IACb,uBAAU,CAAC,OAAO,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;IACvB,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;IAChC,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;IAEhC,IAAA,mBAAW,EACT;;MAEE,EACF;QACE,QAAQ,EAAE,CAAC,aAAa,CAAC;KAC1B,CACF,CAAC;IAEF,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAA,qBAAM,EAAC,8BAAC,CAAC,IAAC,SAAS,EAAC,UAAU,GAAG,CAAC,CAAC;IAExD,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAE3B,QAAQ,CACN,8BAAC,CAAC,IAAC,MAAM,EAAC,GAAG,EAAC,SAAS,EAAC,YAAY;QAClC,8BAAC,CAAC,IAAC,MAAM,EAAC,GAAG,EAAC,SAAS,EAAC,UAAU,GAAG,CACnC,CACL,CAAC;IAEF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;IAC/B,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;IAChC,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;IAEhC,IAAA,mBAAW,EACT;;MAEE,EACF;QACE,QAAQ,EAAE,CAAC,aAAa,CAAC;KAC1B,CACF,CAAC;IAEF,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAA,qBAAM,EAAC,8BAAC,CAAC,IAAC,SAAS,EAAC,UAAU,GAAG,CAAC,CAAC;IAExD,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAElC,QAAQ,CACN,8BAAC,CAAC,IAAC,MAAM,EAAC,GAAG,EAAC,SAAS,EAAC,SAAS;QAC/B,8BAAC,CAAC,IAAC,SAAS,EAAC,UAAU,GAAG,CACxB,CACL,CAAC;IAEF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC","sourcesContent":["import { render } from \"@testing-library/react-native\";\nimport React from \"react\";\n\nimport { StyleSheet } from \"../runtime/native/stylesheet\";\nimport { createMockComponent, registerCSS } from \"./utils\";\n\nafterEach(() => {\n  StyleSheet.__reset();\n});\n\ntest(\"group\", async () => {\n  const A = createMockComponent();\n  const B = createMockComponent();\n\n  registerCSS(\n    `.group\\\\/item .my-class { \n      color: red;\n    }`,\n    {\n      grouping: [\"^group\\\\/.*\"],\n    }\n  );\n\n  const { rerender } = render(<B className=\"my-class\" />);\n\n  expect(B).styleToEqual({});\n\n  rerender(\n    <A testID=\"A\" className=\"group/item\">\n      <B testID=\"B\" className=\"my-class\" />\n    </A>\n  );\n\n  expect(B).styleToEqual({ color: \"rgba(255, 0, 0, 1)\" });\n});\n\ntest(\"invalid group\", async () => {\n  const A = createMockComponent();\n  const B = createMockComponent();\n\n  registerCSS(\n    `.invalid .my-class { \n      color: red;\n    }`,\n    {\n      grouping: [\"^group\\\\/.*\"],\n    }\n  );\n\n  const { rerender } = render(<B className=\"my-class\" />);\n\n  expect(B).styleToEqual(undefined);\n\n  rerender(\n    <A testID=\"A\" className=\"invalid\">\n      <B className=\"my-class\" />\n    </A>\n  );\n\n  expect(B).styleToEqual(undefined);\n});\n"]}