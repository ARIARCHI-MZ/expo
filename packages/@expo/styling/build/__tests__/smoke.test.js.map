{"version":3,"file":"smoke.test.js","sourceRoot":"","sources":["../../src/__tests__/smoke.test.tsx"],"names":[],"mappings":";;;;;AAAA;;;;;GAKG;AACH,gEAAuD;AACvD,kDAA0B;AAE1B,6DAA0D;AAC1D,mCAA2D;AAsB3D,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;AAEhC,SAAS,CAAC,GAAG,EAAE;IACb,uBAAU,CAAC,OAAO,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,MAAM,KAAK,GAAwB;IACjC,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC;IAC/C,kBAAkB,EAAE,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE,sBAAsB,EAAE,CAAC;CAC5E,CAAC;AAEF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE;IAC9D,IAAA,mBAAW,EAAC,eAAe,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;IAE5C,IAAA,qBAAM,EAAC,8BAAC,CAAC,IAAC,SAAS,EAAC,UAAU,GAAG,CAAC,CAAC;IAEnC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","sourcesContent":["/*\n * These tests simple smoke tests to ensure the core functionality is met.\n * If you need to go into more detail, create a new test file\n *\n * https://en.wikipedia.org/wiki/Smoke_testing_(software)\n */\nimport { render } from \"@testing-library/react-native\";\nimport React from \"react\";\n\nimport { StyleSheet } from \"../runtime/native/stylesheet\";\nimport { createMockComponent, registerCSS } from \"./utils\";\n\ntype TestSuite<T extends keyof CSSStyleDeclaration> = readonly [\n  CSSStyleDeclaration[T],\n  Record<string, unknown>\n];\n\ntype TestSuites = {\n  [K in string &\n    keyof CSSStyleDeclaration as CamelToKebabCase<K>]: TestSuite<K>;\n};\n\ntype CamelToKebabCase<\n  T extends string,\n  A extends string = \"\"\n> = T extends `${infer F}${infer R}`\n  ? CamelToKebabCase<\n      R,\n      `${A}${F extends Lowercase<F> ? \"\" : \"-\"}${Lowercase<F>}`\n    >\n  : A;\n\nconst A = createMockComponent();\n\nafterEach(() => {\n  StyleSheet.__reset();\n});\n\nconst cases: Partial<TestSuites> = {\n  color: [\"red\", { color: \"rgba(255, 0, 0, 1)\" }],\n  \"background-color\": [\"purple\", { backgroundColor: \"rgba(128, 0, 128, 1)\" }],\n};\n\ntest.each(Object.entries(cases))(\"%s\", (key, [css, expected]) => {\n  registerCSS(`.my-class { ${key}: ${css} }`);\n\n  render(<A className=\"my-class\" />);\n\n  expect(A).styleToEqual(expected);\n});\n"]}