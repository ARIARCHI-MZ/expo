{"version":3,"file":"transitions.test.js","sourceRoot":"","sources":["../../src/__tests__/transitions.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render } from '@testing-library/react-native';\nimport React from 'react';\nimport { View } from 'react-native';\n// import Animated from \"react-native-reanimated\";\n\nimport { StyleSheet } from '../runtime/native/stylesheet';\nimport { createMockComponent, registerCSS } from './utils';\n\nconst A = createMockComponent(View);\n\njest.useFakeTimers();\n\nbeforeEach(() => {\n  StyleSheet.__reset();\n});\n\ntest('numeric transition', () => {\n  registerCSS(`\n    .transition {\n      transition: width 1s;\n    }\n\n    .first {\n      width: 100px;\n    }\n\n    .second {\n      width: 200px;\n    }\n`);\n\n  const { rerender, getByTestId } = render(<A testID=\"test\" className=\"transition first\" />);\n\n  const testComponent = getByTestId('test');\n\n  // Should have a static width, no matter the time\n  expect(testComponent).toHaveAnimatedStyle({\n    width: 100,\n  });\n  jest.advanceTimersByTime(1000);\n  expect(testComponent).toHaveAnimatedStyle({\n    width: 100,\n  });\n\n  rerender(<A testID=\"test\" className=\"transition second\" />);\n\n  // Directly after rerender, should still have the old width\n  expect(testComponent).toHaveAnimatedStyle({\n    width: 100,\n  });\n\n  // Width should only change after we advance time\n  jest.advanceTimersByTime(500);\n  expect(testComponent).toHaveAnimatedStyle({\n    width: 150,\n  });\n\n  // At the end of the transition\n  jest.advanceTimersByTime(500);\n  expect(testComponent).toHaveAnimatedStyle({\n    width: 200,\n  });\n\n  // Width should not change after the transition is done\n  jest.advanceTimersByTime(500);\n  expect(testComponent).toHaveAnimatedStyle({\n    width: 200,\n  });\n});\n\ntest('color transition', () => {\n  registerCSS(`\n    .transition {\n      transition: color 1s;\n    }\n\n    .first {\n      color: red;\n    }\n\n    .second {\n      color: blue;\n    }\n`);\n\n  const { rerender, getByTestId } = render(<A testID=\"test\" className=\"transition first\" />);\n\n  const testComponent = getByTestId('test');\n\n  // Should have a static width, no matter the time\n  expect(testComponent).toHaveAnimatedStyle({\n    color: 'rgba(255, 0, 0, 1)',\n  });\n  jest.advanceTimersByTime(1000);\n  expect(testComponent).toHaveAnimatedStyle({\n    color: 'rgba(255, 0, 0, 1)',\n  });\n\n  rerender(<A testID=\"test\" className=\"transition second\" />);\n\n  // Directly after rerender, should still have the old width\n  expect(testComponent).toHaveAnimatedStyle({\n    color: 'rgba(255, 0, 0, 1)',\n  });\n\n  // Width should only change after we advance time\n  jest.advanceTimersByTime(500);\n  expect(testComponent).toHaveAnimatedStyle({\n    color: 'rgba(186, 0, 186, 1)',\n  });\n\n  // At the end of the transition\n  jest.advanceTimersByTime(500);\n  expect(testComponent).toHaveAnimatedStyle({\n    color: 'rgba(0, 0, 255, 1)',\n  });\n\n  // Width should not change after the transition is done\n  jest.advanceTimersByTime(500);\n  expect(testComponent).toHaveAnimatedStyle({\n    color: 'rgba(0, 0, 255, 1)',\n  });\n});\n"]}