{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/__tests__/utils.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAkE,MAAM,OAAO,CAAC;AACvF,OAAO,EAAE,IAAI,EAAa,MAAM,cAAc,CAAC;AAE/C,OAAO,EAAkC,uBAAuB,EAAE,MAAM,cAAc,CAAC;AACvF,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAClE,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,MAAM,UAAU,WAAW,CAAC,GAAW,EAAE,OAAwC;IAC/E,UAAU,CAAC,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;AAC1E,CAAC;AAID,MAAM,UAAU,mBAAmB,CACjC,YAAsC,IAAI;IAE1C,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,oBAAC,SAAS,IAAC,GAAG,EAAE,GAAG,KAAM,KAAK,GAAI,CAAC,CAAC,CAAC;IAC7F,MAAM,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAEtC,MAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC3E,OAAO,iBAAiB,CACtB,CAAC,aAAiC,EAAE,KAAa,EAAE,GAAW,EAAE,EAAE;YAChE,OAAO,oBAAC,aAAa,IAAC,GAAG,EAAE,GAAG,KAAM,KAAK,EAAE,GAAG,EAAE,GAAG,GAAI,CAAC;QAC1D,CAAC,EACD,CAAC,EACD,KAAK,EACL,KAAK,EACL,IAAI,CACL,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;QAC9B,SAAS;KACV,CAAC,CAAC;IAEH,OAAO,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["import React, { ComponentType, ForwardRefExoticComponent, RefAttributes } from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { CssToReactNativeRuntimeOptions, cssToReactNativeRuntime } from '../css-to-rn';\nimport { defaultCSSInterop } from '../runtime/native/css-interop';\nimport { StyleSheet } from '../runtime/native/stylesheet';\n\nexport function registerCSS(css: string, options?: CssToReactNativeRuntimeOptions) {\n  StyleSheet.register(cssToReactNativeRuntime(Buffer.from(css), options));\n}\n\ntype MockComponentProps = ViewProps & { className?: string };\n\nexport function createMockComponent(\n  Component: React.ComponentType<any> = View\n): ForwardRefExoticComponent<MockComponentProps & RefAttributes<MockComponentProps>> {\n  const component = Object.assign(jest.fn((props, ref) => <Component ref={ref} {...props} />));\n  const b = React.forwardRef(component);\n\n  const componentWithRef = React.forwardRef<MockComponentProps>((props, ref) => {\n    return defaultCSSInterop(\n      (ComponentType: ComponentType<any>, props: object, key: string) => {\n        return <ComponentType ref={ref} {...props} key={key} />;\n      },\n      b,\n      props,\n      'key',\n      true\n    );\n  });\n\n  Object.assign(componentWithRef, {\n    component,\n  });\n\n  return componentWithRef;\n}\n"]}