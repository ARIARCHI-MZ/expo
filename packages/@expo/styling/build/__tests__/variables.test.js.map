{"version":3,"file":"variables.test.js","sourceRoot":"","sources":["../../src/__tests__/variables.test.tsx"],"names":[],"mappings":";;;;;AAAA,gEAA+D;AAC/D,kDAA0B;AAE1B,mCAA2D;AAC3D,6DAA0D;AAE1D,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;AAEhC,SAAS,CAAC,GAAG,EAAE;IACb,uBAAU,CAAC,OAAO,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC3B,IAAA,mBAAW,EAAC,qDAAqD,CAAC,CAAC;IAEnE,IAAA,qBAAM,EAAC,8BAAC,CAAC,IAAC,SAAS,EAAC,UAAU,GAAG,CAAC,CAAC;IAEnC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrB,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACpC,IAAA,mBAAW,EAAC;;;;GAIX,CAAC,CAAC;IAEH,IAAA,qBAAM,EAAC,8BAAC,CAAC,IAAC,SAAS,EAAC,uBAAuB,GAAG,CAAC,CAAC;IAEhD,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrB,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;IAEH,sCAAsC;IACtC,qBAAM,CAAC,QAAQ,CAAC,8BAAC,CAAC,IAAC,SAAS,EAAC,uBAAuB,GAAG,CAAC,CAAC;IAEzD,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrB,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC7B,MAAM,CAAC,GAAG,IAAA,2BAAmB,GAAE,CAAC;IAEhC,IAAA,mBAAW,EAAC;;;;GAIX,CAAC,CAAC;IAEH,IAAA,qBAAM,EACJ,8BAAC,CAAC,IAAC,SAAS,EAAC,YAAY;QACvB,8BAAC,CAAC,IAAC,SAAS,EAAC,YAAY,GAAG,CAC1B,CACL,CAAC;IAEF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC3B,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAEtC,qBAAM,CAAC,QAAQ,CACb,8BAAC,CAAC,IAAC,SAAS,EAAC,YAAY;QACvB,8BAAC,CAAC,IAAC,SAAS,EAAC,YAAY,GAAG,CAC1B,CACL,CAAC;IAEF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC3B,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","sourcesContent":["import { render, screen } from \"@testing-library/react-native\";\nimport React from \"react\";\n\nimport { createMockComponent, registerCSS } from \"./utils\";\nimport { StyleSheet } from \"../runtime/native/stylesheet\";\n\nconst A = createMockComponent();\n\nafterEach(() => {\n  StyleSheet.__reset();\n});\n\ntest(\"inline variable\", () => {\n  registerCSS(`.my-class { width: var(--my-var); --my-var: 10px; }`);\n\n  render(<A className=\"my-class\" />);\n\n  expect(A).styleToEqual({\n    width: 10,\n  });\n});\n\ntest(\"combined inline variable\", () => {\n  registerCSS(`\n    .my-class-1 { width: var(--my-var); }\n    .my-class-2 { --my-var: 10px; }\n    .my-class-3 { --my-var: 20px; }\n  `);\n\n  render(<A className=\"my-class-1 my-class-2\" />);\n\n  expect(A).styleToEqual({\n    width: 10,\n  });\n\n  // Prove that the order doesn't matter\n  screen.rerender(<A className=\"my-class-3 my-class-1\" />);\n\n  expect(A).styleToEqual({\n    width: 20,\n  });\n});\n\ntest(\"inherit variables\", () => {\n  const B = createMockComponent();\n\n  registerCSS(`\n    .my-class-1 { width: var(--my-var); }\n    .my-class-2 { --my-var: 10px; }\n    .my-class-3 { --my-var: 20px; }\n  `);\n\n  render(\n    <A className=\"my-class-2\">\n      <B className=\"my-class-1\" />\n    </A>\n  );\n\n  expect(A).styleToEqual({});\n  expect(B).styleToEqual({ width: 10 });\n\n  screen.rerender(\n    <A className=\"my-class-3\">\n      <B className=\"my-class-1\" />\n    </A>\n  );\n\n  expect(A).styleToEqual({});\n  expect(B).styleToEqual({ width: 20 });\n});\n"]}