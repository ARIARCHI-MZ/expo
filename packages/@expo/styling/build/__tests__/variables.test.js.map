{"version":3,"file":"variables.test.js","sourceRoot":"","sources":["../../src/__tests__/variables.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,mBAAmB,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAE3D,MAAM,CAAC,GAAG,mBAAmB,EAAE,CAAC;AAEhC,SAAS,CAAC,GAAG,EAAE;IACb,UAAU,CAAC,OAAO,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC3B,WAAW,CAAC,qDAAqD,CAAC,CAAC;IAEnE,MAAM,CAAC,oBAAC,CAAC,IAAC,SAAS,EAAC,UAAU,GAAG,CAAC,CAAC;IAEnC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrB,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACpC,WAAW,CAAC;;;;GAIX,CAAC,CAAC;IAEH,MAAM,CAAC,oBAAC,CAAC,IAAC,SAAS,EAAC,uBAAuB,GAAG,CAAC,CAAC;IAEhD,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrB,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;IAEH,sCAAsC;IACtC,MAAM,CAAC,QAAQ,CAAC,oBAAC,CAAC,IAAC,SAAS,EAAC,uBAAuB,GAAG,CAAC,CAAC;IAEzD,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrB,KAAK,EAAE,EAAE;KACV,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC7B,MAAM,CAAC,GAAG,mBAAmB,EAAE,CAAC;IAEhC,WAAW,CAAC;;;;GAIX,CAAC,CAAC;IAEH,MAAM,CACJ,oBAAC,CAAC,IAAC,SAAS,EAAC,YAAY;QACvB,oBAAC,CAAC,IAAC,SAAS,EAAC,YAAY,GAAG,CAC1B,CACL,CAAC;IAEF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC3B,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAEtC,MAAM,CAAC,QAAQ,CACb,oBAAC,CAAC,IAAC,SAAS,EAAC,YAAY;QACvB,oBAAC,CAAC,IAAC,SAAS,EAAC,YAAY,GAAG,CAC1B,CACL,CAAC;IAEF,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC3B,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","sourcesContent":["import { render, screen } from '@testing-library/react-native';\nimport React from 'react';\n\nimport { StyleSheet } from '../runtime/native/stylesheet';\nimport { createMockComponent, registerCSS } from './utils';\n\nconst A = createMockComponent();\n\nafterEach(() => {\n  StyleSheet.__reset();\n});\n\ntest('inline variable', () => {\n  registerCSS(`.my-class { width: var(--my-var); --my-var: 10px; }`);\n\n  render(<A className=\"my-class\" />);\n\n  expect(A).styleToEqual({\n    width: 10,\n  });\n});\n\ntest('combined inline variable', () => {\n  registerCSS(`\n    .my-class-1 { width: var(--my-var); }\n    .my-class-2 { --my-var: 10px; }\n    .my-class-3 { --my-var: 20px; }\n  `);\n\n  render(<A className=\"my-class-1 my-class-2\" />);\n\n  expect(A).styleToEqual({\n    width: 10,\n  });\n\n  // Prove that the order doesn't matter\n  screen.rerender(<A className=\"my-class-3 my-class-1\" />);\n\n  expect(A).styleToEqual({\n    width: 20,\n  });\n});\n\ntest('inherit variables', () => {\n  const B = createMockComponent();\n\n  registerCSS(`\n    .my-class-1 { width: var(--my-var); }\n    .my-class-2 { --my-var: 10px; }\n    .my-class-3 { --my-var: 20px; }\n  `);\n\n  render(\n    <A className=\"my-class-2\">\n      <B className=\"my-class-1\" />\n    </A>\n  );\n\n  expect(A).styleToEqual({});\n  expect(B).styleToEqual({ width: 10 });\n\n  screen.rerender(\n    <A className=\"my-class-3\">\n      <B className=\"my-class-1\" />\n    </A>\n  );\n\n  expect(A).styleToEqual({});\n  expect(B).styleToEqual({ width: 20 });\n});\n"]}