{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/css-to-rn/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  KeyframesRule,\n  Animation,\n  Declaration,\n  transform as lightningcss,\n  DeclarationBlock,\n  MediaQuery,\n  MediaRule,\n  SelectorList,\n  Rule,\n  ContainerType,\n  ContainerRule,\n  Selector,\n} from 'lightningcss';\n\nimport { isRuntimeValue } from '../shared';\nimport {\n  ExtractedContainerQuery,\n  ExtractedStyle,\n  StyleSheetRegisterOptions,\n  AnimatableCSSProperty,\n  ExtractedAnimation,\n} from '../types';\nimport { ParseDeclarationOptions, parseDeclaration } from './parseDeclaration';\nimport { exhaustiveCheck } from './utils';\n\nexport type CssToReactNativeRuntimeOptions = {\n  inlineRem?: number | false;\n  grouping?: (string | RegExp)[];\n};\n\n/**\n * Converts a CSS file to a collection of style declarations that can be used with the StyleSheet API\n *\n * @param {Buffer} code - The CSS file contents as a buffer\n * @param {CssToReactNativeRuntimeOptions} options - (Optional) Options for the conversion process\n * @returns {StyleSheetRegisterOptions} - An object containing the extracted style declarations and animations\n */\nexport function cssToReactNativeRuntime(\n  code: Buffer,\n  options: CssToReactNativeRuntimeOptions = {}\n): StyleSheetRegisterOptions {\n  // Create maps to store the extracted style declarations and animations\n  const declarations = new Map<string, ExtractedStyle | ExtractedStyle[]>();\n  const keyframes = new Map<string, ExtractedAnimation>();\n\n  // Parse the grouping options to create an array of regular expressions\n  const grouping =\n    options.grouping?.map((value) => {\n      return typeof value === 'string' ? new RegExp(value) : value;\n    }) ?? [];\n\n  // Use the lightningcss library to traverse the CSS AST and extract style declarations and animations\n  lightningcss({\n    filename: 'style.css', // This is ignored, but required\n    code,\n    visitor: {\n      Rule(rule) {\n        // Extract the style declarations and animations from the current rule\n        extractRule(rule, { ...options, grouping, declarations, keyframes }, options);\n        // We have processed this rule, so now delete it from the AST\n        return [];\n      },\n    },\n  });\n\n  // Convert the extracted style declarations and animations from maps to objects and return them\n  return {\n    declarations: Object.fromEntries(declarations),\n    keyframes: Object.fromEntries(keyframes),\n  };\n}\n\n/**\n * Options object for extracting CSS rules from a stylesheet.\n *\n * @interface ExtractRuleOptions\n * @property {Map<string, ExtractedStyle | ExtractedStyle[]>} declarations - A map of extracted style declarations.\n * @property {Map<string, ExtractedAnimation>} keyframes - A map of extracted animation declarations.\n * @property {Partial<ExtractedStyle>} [style] - A partial style object representing the current rule. This should be built up as the tree is traversed.\n * @property {RegExp[]} [grouping] - An array of regular expressions for grouping related rules together.\n */\ninterface ExtractRuleOptions {\n  declarations: Map<string, ExtractedStyle | ExtractedStyle[]>;\n  keyframes: Map<string, ExtractedAnimation>;\n  style?: Partial<ExtractedStyle>;\n  grouping?: RegExp[];\n}\n\n/**\n * Extracts style declarations and animations from a given CSS rule, based on its type.\n *\n * @param {Rule} rule - The CSS rule to extract style declarations and animations from.\n * @param {ExtractRuleOptions} extractOptions - Options for the extraction process, including maps for storing extracted data.\n * @param {CssToReactNativeRuntimeOptions} parseOptions - Options for parsing the CSS code, such as grouping related rules together.\n */\nfunction extractRule(\n  rule: Rule,\n  extractOptions: ExtractRuleOptions,\n  parseOptions: CssToReactNativeRuntimeOptions\n) {\n  // Check the rule's type to determine which extraction function to call\n  switch (rule.type) {\n    case 'keyframes': {\n      // If the rule is a keyframe animation, extract it with the `extractKeyFrames` function\n      extractKeyFrames(rule.value, extractOptions, parseOptions);\n      break;\n    }\n    case 'container': {\n      // If the rule is a container, extract it with the `extractedContainer` function\n      extractedContainer(rule.value, extractOptions, parseOptions);\n      break;\n    }\n    case 'media': {\n      // If the rule is a media query, extract it with the `extractMedia` function\n      extractMedia(rule.value, extractOptions, parseOptions);\n      break;\n    }\n    case 'style': {\n      // If the rule is a style declaration, extract it with the `getExtractedStyle` function and store it in the `declarations` map\n      if (rule.value.declarations) {\n        setStyleForSelectorList(\n          {\n            ...extractOptions.style,\n            ...getExtractedStyle(rule.value.declarations, parseOptions),\n          },\n          rule.value.selectors,\n          extractOptions\n        );\n      }\n      break;\n    }\n  }\n}\n\n/**\n * This function takes in a MediaRule object, an ExtractRuleOptions object and a CssToReactNativeRuntimeOptions object,\n * and returns an array of MediaQuery objects representing styles extracted from screen media queries.\n *\n * @param mediaRule - The MediaRule object containing the media query and its rules.\n * @param extractOptions - The ExtractRuleOptions object to use when extracting styles.\n * @param parseOptions - The CssToReactNativeRuntimeOptions object to use when parsing styles.\n *\n * @returns undefined if no screen media queries are found in the mediaRule, else it returns the extracted styles.\n */\nfunction extractMedia(\n  mediaRule: MediaRule,\n  extractOptions: ExtractRuleOptions,\n  parseOptions: CssToReactNativeRuntimeOptions\n) {\n  // Initialize an empty array to store screen media queries\n  const media: MediaQuery[] = [];\n\n  // Iterate over all media queries in the mediaRule\n  for (const mediaQuery of mediaRule.query.mediaQueries) {\n    // Check if the media type is screen\n    let isScreen = mediaQuery.mediaType !== 'print';\n    if (mediaQuery.qualifier === 'not') {\n      isScreen = !isScreen;\n    }\n\n    // If it's a screen media query, add it to the media array\n    if (isScreen) {\n      media.push(mediaQuery);\n    }\n  }\n\n  if (media.length === 0) {\n    return;\n  }\n\n  const newExtractOptions: ExtractRuleOptions = {\n    ...extractOptions,\n    style: {\n      media,\n    },\n  };\n\n  // Iterate over all rules in the mediaRule and extract their styles using the updated ExtractRuleOptions\n  for (const rule of mediaRule.rules) {\n    extractRule(rule, newExtractOptions, parseOptions);\n  }\n}\n\n/**\n * @param containerRule - The ContainerRule object containing the container query and its rules.\n * @param extractOptions - The ExtractRuleOptions object to use when extracting styles.\n * @param parseOptions - The CssToReactNativeRuntimeOptions object to use when parsing styles.\n */\nfunction extractedContainer(\n  containerRule: ContainerRule,\n  extractOptions: ExtractRuleOptions,\n  parseOptions: CssToReactNativeRuntimeOptions\n) {\n  // Create a new ExtractRuleOptions object with the updated container query information\n  const newExtractOptions: ExtractRuleOptions = {\n    ...extractOptions,\n    style: {\n      containerQuery: [\n        {\n          name: containerRule.name,\n          condition: containerRule.condition,\n        },\n      ],\n    },\n  };\n\n  // Iterate over all rules inside the containerRule and extract their styles using the updated ExtractRuleOptions\n  for (const rule of containerRule.rules) {\n    extractRule(rule, newExtractOptions, parseOptions);\n  }\n}\n\n/**\n * @param style - The ExtractedStyle object to use when setting styles.\n * @param selectorList - The SelectorList object containing the selectors to use when setting styles.\n * @param declarations - The declarations object to use when adding declarations.\n */\nfunction setStyleForSelectorList(\n  style: ExtractedStyle,\n  selectorList: SelectorList,\n  { declarations, grouping = [] }: ExtractRuleOptions\n) {\n  for (const selector of selectorList) {\n    // Find the last className selector in the selector list\n    const classSelectorIndex = findLastIndex(selector, (s) => s.type === 'class');\n\n    // If no className selector is found, skip this selector\n    if (classSelectorIndex === -1) {\n      continue;\n    }\n\n    // Extract the conditions before the className selector\n    const conditions = groupSelector(selector.slice(0, classSelectorIndex));\n\n    // Check if all the conditions are valid based on the grouping in the ExtractRuleOptions\n    const conditionValid = conditions.every((c) => {\n      return grouping.some((g) => g.test(c.className));\n    });\n\n    // If not all the conditions are valid, skip this selector\n    if (!conditionValid) {\n      continue;\n    }\n\n    // Add the conditions to the declarations object\n    for (const condition of conditions) {\n      addDeclaration(\n        condition.className,\n        {\n          style: {},\n          container: {\n            names: [condition.className],\n          },\n        },\n        declarations\n      );\n    }\n\n    let containerQueries = style.containerQuery;\n\n    // If there are any conditions, add them to the container queries\n    if (conditions.length > 0) {\n      containerQueries ??= [];\n\n      for (const condition of conditions) {\n        const containerQuery: ExtractedContainerQuery = {\n          name: condition.className,\n          pseudoClasses: condition.pseudoClasses,\n        };\n\n        containerQueries.push(containerQuery);\n      }\n    }\n\n    // Extract the className selector and its pseudo-classes\n    const groupedDelecarationSelectors = groupSelector(selector.slice(classSelectorIndex));\n\n    // If there is more than one selector, skip this selector\n    if (groupedDelecarationSelectors.length !== 1) {\n      continue;\n    }\n\n    const [{ className, pseudoClasses }] = groupedDelecarationSelectors;\n\n    // Add the className selector and its pseudo-classes to the declarations object, with the extracted style and container queries\n    addDeclaration(\n      className,\n      { ...style, pseudoClasses, containerQuery: containerQueries },\n      declarations\n    );\n  }\n}\n\nfunction addDeclaration(\n  className: string,\n  style: ExtractedStyle,\n  declarations: ExtractRuleOptions['declarations']\n) {\n  const existing = declarations.get(className);\n\n  if (Array.isArray(existing)) {\n    existing.push(style);\n  } else if (existing) {\n    declarations.set(className, [existing, style]);\n  } else {\n    declarations.set(className, style);\n  }\n}\n\ntype GroupedSelector = {\n  className: string;\n  pseudoClasses?: Record<string, true>;\n};\n\nfunction groupSelector(selectors: Selector) {\n  let current: GroupedSelector | undefined;\n  const groupedSelectors: GroupedSelector[] = [];\n\n  for (const selector of selectors) {\n    switch (selector.type) {\n      case 'combinator':\n      case 'universal':\n      case 'namespace':\n      case 'type':\n      case 'id':\n      case 'pseudo-element':\n      case 'nesting':\n      case 'attribute':\n        current = undefined;\n        break;\n      case 'class':\n        // Selectors like .foo.bar are not valid\n        if (current?.className) {\n          groupedSelectors.pop();\n          return [];\n        } else {\n          current = {\n            className: selector.name,\n          };\n          groupedSelectors.push(current);\n        }\n        break;\n      case 'pseudo-class':\n        switch (selector.kind) {\n          case 'hover':\n          case 'active':\n          case 'focus':\n            if (!current) break;\n            current.pseudoClasses ??= {};\n            current.pseudoClasses[selector.kind] = true;\n            break;\n        }\n        break;\n      default:\n        exhaustiveCheck(selector);\n    }\n  }\n\n  return groupedSelectors;\n}\n\nfunction extractKeyFrames(\n  keyframes: KeyframesRule<Declaration>,\n  extractOptions: ExtractRuleOptions,\n  options: CssToReactNativeRuntimeOptions\n) {\n  const extractedAnimation: ExtractedAnimation = { frames: [] };\n  const frames = extractedAnimation.frames;\n\n  for (const frame of keyframes.keyframes) {\n    const { style } = getExtractedStyle(frame.declarations, {\n      ...options,\n      requiresLayout() {\n        extractedAnimation.requiresLayout = true;\n      },\n    });\n\n    for (const selector of frame.selectors) {\n      const keyframe =\n        selector.type === 'percentage'\n          ? selector.value * 100\n          : selector.type === 'from'\n          ? 0\n          : selector.type === 'to'\n          ? 100\n          : undefined;\n\n      if (keyframe === undefined) continue;\n\n      switch (selector.type) {\n        case 'percentage':\n          frames.push({ selector: selector.value, style });\n          break;\n        case 'from':\n          frames.push({ selector: 0, style });\n          break;\n        case 'to':\n          frames.push({ selector: 1, style });\n          break;\n        default:\n          exhaustiveCheck(selector);\n      }\n    }\n  }\n\n  // Ensure there are always two frames, a start and end\n  if (frames.length === 1) {\n    frames.push({ selector: 0, style: {} });\n  }\n\n  extractedAnimation.frames = frames.sort((a, b) => a.selector - b.selector);\n\n  extractOptions.keyframes.set(keyframes.name.value, extractedAnimation);\n}\n\ninterface GetExtractedStyleOptions extends CssToReactNativeRuntimeOptions {\n  requiresLayout?: () => void;\n}\n\nfunction getExtractedStyle(\n  declarationBlock: DeclarationBlock<Declaration>,\n  options: GetExtractedStyleOptions\n): ExtractedStyle {\n  const extrtactedStyle: ExtractedStyle = {\n    style: {},\n  };\n\n  const declarationArray = [declarationBlock.declarations, declarationBlock.importantDeclarations]\n    .flat()\n    .filter((d): d is Declaration => !!d);\n\n  /*\n   * Adds a style property to the rule record.\n   *\n   * The shorthand option handles if the style came from a long or short hand property\n   * E.g. `margin` is a shorthand property for `margin-top`, `margin-bottom`, `margin-left` and `margin-right`\n   *\n   * The `append` option allows the same property to be added multiple times\n   * E.g. `transform` accepts an array of transforms\n   */\n  function addStyleProp(property: string, value: any, { shortHand = false, append = false } = {}) {\n    if (value === undefined) {\n      return;\n    }\n\n    if (property.startsWith('--')) {\n      return addVariable(property, value);\n    }\n\n    property = kebabToCamelCase(property);\n\n    const style = extrtactedStyle.style;\n\n    if (append) {\n      const styleValue = style[property];\n      if (Array.isArray(styleValue)) {\n        styleValue.push(...value);\n      } else {\n        style[property] = [value];\n      }\n    } else if (shortHand) {\n      // If the shorthand property has already been set, don't overwrite it\n      // The longhand property always have priority\n      style[property] ??= value;\n    } else {\n      style[property] = value;\n    }\n\n    if (isRuntimeValue(value)) {\n      extrtactedStyle.isDynamic = true;\n    }\n  }\n\n  function addVariable(property: string, value: any) {\n    extrtactedStyle.variables ??= {};\n    extrtactedStyle.variables[property] = value;\n  }\n\n  function addContainerProp(\n    declaration: Extract<\n      Declaration,\n      { property: 'container' | 'container-name' | 'container-type' }\n    >\n  ) {\n    let names: false | string[] = false;\n    let type: ContainerType | undefined;\n\n    switch (declaration.property) {\n      case 'container':\n        if (declaration.value.name.type === 'none') {\n          names = false;\n        } else {\n          names = declaration.value.name.value;\n        }\n        type = declaration.value.containerType;\n        break;\n      case 'container-name':\n        if (declaration.value.type === 'none') {\n          names = false;\n        } else {\n          names = declaration.value.value;\n        }\n        break;\n      case 'container-type':\n        type = declaration.value;\n        break;\n    }\n\n    if (names === false) {\n      return;\n    }\n\n    if (names) {\n      extrtactedStyle.container ??= {};\n      extrtactedStyle.container.names = names;\n    }\n\n    if (type) {\n      extrtactedStyle.container ??= {};\n      extrtactedStyle.container.type = type;\n    }\n  }\n\n  function addTransitionProp(\n    declaration: Extract<\n      Declaration,\n      {\n        property:\n          | 'transition-property'\n          | 'transition-duration'\n          | 'transition-delay'\n          | 'transition-timing-function'\n          | 'transition';\n      }\n    >\n  ) {\n    extrtactedStyle.transition ??= {};\n\n    switch (declaration.property) {\n      case 'transition-property':\n        extrtactedStyle.transition.property = declaration.value.map((v) => {\n          return kebabToCamelCase(v.property) as AnimatableCSSProperty;\n        });\n        break;\n      case 'transition-duration':\n        extrtactedStyle.transition.duration = declaration.value;\n        break;\n      case 'transition-delay':\n        extrtactedStyle.transition.delay = declaration.value;\n        break;\n      case 'transition-timing-function':\n        extrtactedStyle.transition.timingFunction = declaration.value;\n        break;\n      case 'transition': {\n        let setProperty = true;\n        let setDuration = true;\n        let setDelay = true;\n        let setTiming = true;\n\n        // Shorthand properties cannot override the longhand property\n        // So we skip setting the property if it already exists\n        // Otherwise, we need to set the property to an empty array\n        if (extrtactedStyle.transition.property) {\n          setProperty = false;\n        } else {\n          extrtactedStyle.transition.property = [];\n        }\n        if (extrtactedStyle.transition.duration) {\n          setDuration = false;\n        } else {\n          extrtactedStyle.transition.duration = [];\n        }\n        if (extrtactedStyle.transition.delay) {\n          setDelay = false;\n        } else {\n          extrtactedStyle.transition.delay = [];\n        }\n        if (extrtactedStyle.transition.timingFunction) {\n          setTiming = false;\n        } else {\n          extrtactedStyle.transition.timingFunction = [];\n        }\n\n        // Loop through each transition value and only set the properties that\n        // were not already set by the longhand property\n        for (const value of declaration.value) {\n          if (setProperty) {\n            extrtactedStyle.transition.property?.push(\n              kebabToCamelCase(value.property.property) as AnimatableCSSProperty\n            );\n          }\n          if (setDuration) {\n            extrtactedStyle.transition.duration?.push(value.duration);\n          }\n          if (setDelay) {\n            extrtactedStyle.transition.delay?.push(value.delay);\n          }\n          if (setTiming) {\n            extrtactedStyle.transition.timingFunction?.push(value.timingFunction);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  function addAnimationProp(property: string, value: any) {\n    if (property === 'animation') {\n      const groupedProperties: Record<string, any[]> = {};\n\n      for (const animation of value as Animation[]) {\n        for (const [key, value] of Object.entries(animation)) {\n          groupedProperties[key] ??= [];\n          groupedProperties[key].push(value);\n        }\n      }\n\n      extrtactedStyle.animations ??= {};\n      for (const [property, value] of Object.entries(groupedProperties)) {\n        const key = property\n          .replace('animation-', '')\n          .replace(/-./g, (x) => x[1].toUpperCase()) as keyof Animation;\n\n        extrtactedStyle.animations[key] ??= value;\n      }\n    } else {\n      const key = property\n        .replace('animation-', '')\n        .replace(/-./g, (x) => x[1].toUpperCase()) as keyof Animation;\n\n      extrtactedStyle.animations ??= {};\n      extrtactedStyle.animations[key] = value;\n    }\n  }\n\n  function requiresLayout() {\n    extrtactedStyle.requiresLayout = true;\n  }\n\n  const parseDeclarationOptions: ParseDeclarationOptions = {\n    addStyleProp,\n    addAnimationProp,\n    addContainerProp,\n    addTransitionProp,\n    requiresLayout,\n    ...options,\n  };\n\n  for (const declaration of declarationArray) {\n    parseDeclaration(declaration, parseDeclarationOptions);\n  }\n\n  return extrtactedStyle;\n}\n\nfunction findLastIndex<T>(array: T[], predicate: (arg: T) => boolean) {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nfunction kebabToCamelCase(str: string) {\n  return str.replace(/-./g, (x) => x[1].toUpperCase());\n}\n"]}