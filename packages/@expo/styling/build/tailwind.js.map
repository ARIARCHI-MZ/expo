{"version":3,"file":"tailwind.js","sourceRoot":"","sources":["../src/tailwind.ts"],"names":[],"mappings":";;;;;;AACA,gDAAwB;AACxB,qDAA6D;AAE7D,SAAgB,YAAY,CAC1B,MAAe,EACf,EACE,KAAK,GAAG,cAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,EACpD,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,qCAAqC,CAAC,GAC5E,GAAG,EAAE;IAEN,MAAM,mBAAmB,GAAG,KAAK,EAC/B,WAAgB,EAChB,OAAY,EACZ,iBAAsB,EACtB,EAAE;;QACF,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE5B,MAAM,IAAA,aAAO,EAAC;YACZ,SAAS,EAAE,KAAK;YAChB,UAAU,EAAE,MAAM;YAClB,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;YACzC,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,OAAO,MAAA,MAAA,MAAM,CAAC,WAAW,0CAAE,mBAAmB,mDAC5C,WAAW,EACX,OAAO,EACP,iBAAiB,CAClB,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO;QACL,GAAG,MAAM;QACT,QAAQ,EAAE;YACR,GAAG,MAAM,CAAC,QAAQ;YAClB,UAAU,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC;SACnD;QACD,eAAe,EAAE,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC;QAC7D,WAAW,EAAE;YACX,GAAG,MAAM,CAAC,WAAW;YACrB,mBAAmB;YACnB,oBAAoB,EAAE;gBACpB,CAAC,KAAK,CAAC,EAAE,MAAM;aAChB;SACF;KACF,CAAC;AACJ,CAAC;AA3CD,oCA2CC","sourcesContent":["import type { ConfigT } from \"metro-config\";\nimport path from \"path\";\nimport { build as twBuild } from \"tailwindcss/lib/cli/build\";\n\nexport function withTailwind(\n  config: ConfigT,\n  {\n    input = path.relative(process.cwd(), \"./global.css\"),\n    output = path.resolve(process.cwd(), \"node_modules/.cache/expo/global.css\"),\n  } = {}\n) {\n  const getTransformOptions = async (\n    entryPoints: any,\n    options: any,\n    getDependenciesOf: any\n  ) => {\n    process.stdout.clearLine(0);\n\n    await twBuild({\n      \"--input\": input,\n      \"--output\": output,\n      \"--watch\": options.dev ? \"always\" : false,\n      \"--poll\": true,\n    });\n\n    return config.transformer?.getTransformOptions?.(\n      entryPoints,\n      options,\n      getDependenciesOf\n    );\n  };\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      sourceExts: [...config.resolver.sourceExts, \"css\"],\n    },\n    transformerPath: require.resolve(\"@expo/styling/transformer\"),\n    transformer: {\n      ...config.transformer,\n      getTransformOptions,\n      externallyManagedCss: {\n        [input]: output,\n      },\n    },\n  };\n}\n"]}