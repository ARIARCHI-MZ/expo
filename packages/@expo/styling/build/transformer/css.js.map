{"version":3,"file":"css.js","sourceRoot":"","sources":["../../src/transformer/css.ts"],"names":[],"mappings":";;;AAAA,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;AAC7C,CAAC;AAFD,gDAEC;AAED,SAAgB,qBAAqB,CAAC,EAAU;IAC9C,wEAAwE;IACxE,mEAAmE;IACnE,cAAc;IACd,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,OAAO,2CAA2C,IAAI;qEACa,IAAI;;;IAGrE,CAAC;AACL,CAAC;AAVD,sDAUC;AAED,SAAgB,kBAAkB,CAAC,KAAwC;IACzE,MAAM,oBAAoB,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEjE,OAAO;;;;;;IAML,qBAAqB,CAAC,KAAK,CAAC,QAAQ,CAAC;;;kBAGvB,oBAAoB;;;;;;MAMhC,CAAC;AACP,CAAC;AAnBD,gDAmBC;AAED,SAAgB,wBAAwB,CAAC,GAAW;IAClD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,EAAE,CAAC;KACX;IAED,OAAO,GAAG;SACP,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;SACtB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;SACpB,OAAO,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC7E,CAAC;AATD,4DASC","sourcesContent":["export function pathToHtmlSafeName(path: string) {\n  return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n}\n\nexport function getHotReplaceTemplate(id: string) {\n  // In dev mode, we need to replace the style tag instead of appending it\n  // use the path as the expo-css-hmr attribute to find the style tag\n  // to replace.\n  const attr = JSON.stringify(pathToHtmlSafeName(id));\n  return `style.setAttribute('data-expo-css-hmr', ${attr});\n  const previousStyle = document.querySelector('[data-expo-css-hmr=${attr}]');\n  if (previousStyle) {\n    previousStyle.parentNode.removeChild(previousStyle);\n  }`;\n}\n\nexport function wrapDevelopmentCSS(props: { src: string; filename: string }) {\n  const withBackTicksEscaped = escapeBackticksAndOctals(props.src);\n\n  return `(() => {\n  if (typeof document === 'undefined') {\n    return\n  }\n  const head = document.head || document.getElementsByTagName('head')[0];\n  const style = document.createElement('style');\n  ${getHotReplaceTemplate(props.filename)}\n  style.setAttribute('data-expo-loader', 'css');\n  head.appendChild(style);\n  const css = \\`${withBackTicksEscaped}\\`;\n  if (style.styleSheet){\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n})();`;\n}\n\nexport function escapeBackticksAndOctals(str: string) {\n  if (typeof str !== \"string\") {\n    return \"\";\n  }\n\n  return str\n    .replace(/\\\\/g, \"\\\\\\\\\")\n    .replace(/`/g, \"\\\\`\")\n    .replace(/[\\0-\\7]/g, (match) => `\\\\0${match.charCodeAt(0).toString(8)}`);\n}\n"]}