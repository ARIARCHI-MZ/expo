{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/transformer/index.tsx"],"names":[],"mappings":";;;;;;AAAA;;;;;;GAMG;AACH,oFAIgC;AAEhC,6DAA0D;AAC1D,uDAAoD;AAE7C,KAAK,UAAU,SAAS,CAC7B,MAA2B,EAC3B,WAAmB,EACnB,QAAgB,EAChB,IAAY,EACZ,OAA2B;;IAE3B,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,KAAK,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3E,yDAAyD;IACzD,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,gCAAM,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACvE;IAED,IAAI,MAAA,MAAM,CAAC,oBAAoB,0CAAG,QAAQ,CAAC,EAAE;QAC3C,OAAO,gCAAM,CAAC,SAAS,CACrB,MAAM,EACN,WAAW,EACX,QAAQ,EACR,MAAM,CAAC,IAAI,CACT,6BAA6B,MAAA,MAAM,CAAC,oBAAoB,0CAAG,QAAQ,CAAC,IAAI,CACzE,EACD,OAAO,CACR,CAAC;KACH;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC9B,OAAO,IAAA,iCAAe,EAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACtE;SAAM;QACL,OAAO,IAAA,uCAAkB,EAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACzE;AACH,CAAC;AA9BD,8BA8BC;AAED;;;;;GAKG;AACH,MAAM,CAAC,OAAO,GAAG;IACf,iDAAiD;IACjD,GAAG,gCAAM;IACT,SAAS;CACV,CAAC","sourcesContent":["/**\n * Copyright 2023-present 650 Industries (Expo). All rights reserved.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport worker, {\n  JsTransformerConfig,\n  JsTransformOptions,\n  TransformResponse,\n} from \"metro-transform-worker\";\n\nimport { nativeCssTransform } from \"./nativeCssTransform\";\nimport { webCssTransform } from \"./webCssTransform\";\n\nexport async function transform(\n  config: JsTransformerConfig,\n  projectRoot: string,\n  filename: string,\n  data: Buffer,\n  options: JsTransformOptions\n): Promise<TransformResponse> {\n  const isCss = options.type !== \"asset\" && /\\.(s?css|sass)$/.test(filename);\n  // If the file is not CSS, then use the default behavior.\n  if (!isCss) {\n    return worker.transform(config, projectRoot, filename, data, options);\n  }\n\n  if (config.externallyManagedCss?.[filename]) {\n    return worker.transform(\n      config,\n      projectRoot,\n      filename,\n      Buffer.from(\n        `module.exports = require(\"${config.externallyManagedCss?.[filename]}\")`\n      ),\n      options\n    );\n  }\n\n  if (options.platform === \"web\") {\n    return webCssTransform(config, projectRoot, filename, data, options);\n  } else {\n    return nativeCssTransform(config, projectRoot, filename, data, options);\n  }\n}\n\n/**\n * A custom Metro transformer that adds support for processing Expo-specific bundler features.\n * - Global CSS files on web.\n * - CSS Modules on web.\n * - TODO: Tailwind CSS on web.\n */\nmodule.exports = {\n  // Use defaults for everything that's not custom.\n  ...worker,\n  transform,\n};\n"]}