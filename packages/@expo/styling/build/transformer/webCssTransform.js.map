{"version":3,"file":"webCssTransform.js","sourceRoot":"","sources":["../../src/transformer/webCssTransform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2023-present 650 Industries (Expo). All rights reserved.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { FBSourceFunctionMap } from \"metro-source-map\";\nimport worker, {\n  JsTransformerConfig,\n  JsTransformOptions,\n  TransformResponse,\n} from \"metro-transform-worker\";\n\nimport { wrapDevelopmentCSS } from \"./css\";\nimport { matchCssModule, transformCssModuleWeb } from \"./css-modules\";\n// import { compileSass, matchSass } from \"./sass\";\n\nconst countLines = require(\"metro/src/lib/countLines\") as (\n  string: string\n) => number;\n\ntype JSFileType = \"js/script\" | \"js/module\" | \"js/module/asset\";\n\ntype JsOutput = {\n  data: {\n    code: string;\n    lineCount: number;\n    map: any[];\n    functionMap: FBSourceFunctionMap | null;\n  };\n  type: JSFileType;\n};\n\nexport async function webCssTransform(\n  config: JsTransformerConfig,\n  projectRoot: string,\n  filename: string,\n  data: Buffer,\n  options: JsTransformOptions\n): Promise<TransformResponse> {\n  const code = data.toString(\"utf8\");\n\n  // Apply postcss transforms\n  // code = await transformPostCssModule(projectRoot, {\n  //   src: code,\n  //   filename,\n  // });\n\n  // TODO: When native has CSS support, this will need to move higher up.\n  // const syntax = matchSass(filename);\n  // if (syntax) {\n  //   code = compileSass(projectRoot, { filename, src: code }, { syntax }).src;\n  // }\n\n  // If the file is a CSS Module, then transform it to a JS module\n  // in development and a static CSS file in production.\n  if (matchCssModule(filename)) {\n    const results = await transformCssModuleWeb({\n      filename,\n      src: code,\n      options: {\n        projectRoot,\n        dev: options.dev,\n        minify: options.minify,\n        sourceMap: false,\n      },\n    });\n\n    if (options.dev) {\n      // Dev has the CSS appended to the JS file.\n      return worker.transform(\n        config,\n        projectRoot,\n        filename,\n        Buffer.from(results.output),\n        options\n      );\n    }\n\n    const jsModuleResults = await worker.transform(\n      config,\n      projectRoot,\n      filename,\n      Buffer.from(results.output),\n      options\n    );\n\n    const cssCode = results.css.toString();\n    const output: JsOutput[] = [\n      {\n        type: \"js/module\",\n        data: {\n          ...jsModuleResults.output[0].data,\n\n          // Append additional css metadata for static extraction.\n          css: {\n            code: cssCode,\n            lineCount: countLines(cssCode),\n            map: [],\n            functionMap: null,\n          },\n        },\n      },\n    ];\n\n    return {\n      dependencies: jsModuleResults.dependencies,\n      output,\n    };\n  }\n\n  // Global CSS:\n\n  if (options.dev) {\n    return worker.transform(\n      config,\n      projectRoot,\n      filename,\n      // In development, we use a JS file that appends a style tag to the\n      // document. This is necessary because we need to replace the style tag\n      // when the CSS changes.\n      // NOTE: We may change this to better support static rendering in the future.\n      Buffer.from(wrapDevelopmentCSS({ src: code, filename })),\n      options\n    );\n  }\n\n  const { transform } = await import(\"lightningcss\");\n\n  // TODO: Add bundling to resolve imports\n  // https://lightningcss.dev/bundling.html#bundling-order\n\n  const cssResults = transform({\n    filename,\n    code: Buffer.from(code),\n    sourceMap: false,\n    cssModules: false,\n    projectRoot,\n    minify: options.minify,\n  });\n\n  // TODO: Warnings:\n  // cssResults.warnings.forEach((warning) => {\n  // });\n\n  // Create a mock JS module that exports an empty object,\n  // this ensures Metro dependency graph is correct.\n  const jsModuleResults = await worker.transform(\n    config,\n    projectRoot,\n    filename,\n    Buffer.from(\"\"),\n    options\n  );\n\n  const cssCode = cssResults.code.toString();\n\n  // In production, we export the CSS as a string and use a special type to prevent\n  // it from being included in the JS bundle. We'll extract the CSS like an asset later\n  // and append it to the HTML bundle.\n  const output: JsOutput[] = [\n    {\n      data: {\n        ...jsModuleResults.output[0].data,\n\n        // Append additional css metadata for static extraction.\n        css: {\n          code: cssCode,\n          lineCount: countLines(cssCode),\n          map: [],\n          functionMap: null,\n        },\n      },\n      type: \"js/module\",\n    },\n  ];\n\n  return {\n    dependencies: jsModuleResults.dependencies,\n    output,\n  };\n}\n"]}