{"version":3,"file":"generateFixtures.js","sourceRoot":"","sources":["../../src/__typetests__/generateFixtures.ts"],"names":[],"mappings":";;;AAAA,0CAAyD;AACzD,+BAA4B;AAQ5B,MAAM,QAAQ,GAA4B;IACxC,KAAK,EAAE;QACL,YAAY,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;QACnC,aAAa,EAAE;YACb,+BAA+B;YAC/B,kCAAkC;YAClC,0EAA0E;SAC3E;QACD,qBAAqB,EAAE;YACrB,iBAAiB;YACjB,sBAAsB;YACtB,mCAAmC;SACpC;KACF;CACF,CAAC;AAEa,KAAK;IAClB,gEAAgE;IAChE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAQ,EAAC,IAAA,WAAI,EAAC,SAAS,EAAE,8BAA8B,CAAC,EAAE,MAAM,CAAC,CAAC;IACzF,MAAM,OAAO,CAAC,GAAG,CACf,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAClD,MAAM,KAAK,GAAG,QAAQ;YACpB,0CAA0C;aACzC,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC;YAC9C,uBAAuB;aACtB,OAAO,CACN,6BAA6B,EAC7B,uBAAuB,IAAA,sBAAc,EAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAC7D;aACA,OAAO,CACN,gDAAgD,EAChD,0CAA0C,IAAA,sBAAc,EAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CACjF;aACA,OAAO,CACN,oCAAoC,EACpC,+BAA+B,IAAA,sBAAc,EAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAC9E;aACA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;aACrB,UAAU,CAAC,eAAe,EAAE,sBAAsB,CAAC;aACnD,UAAU,CAAC,kBAAkB,EAAE,yBAAyB,CAAC,CAAC;QAE7D,OAAO,IAAA,oBAAS,EAAC,IAAA,WAAI,EAAC,SAAS,EAAE,aAAa,EAAE,GAAG,GAAG,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC,CAAC,CACH,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC;AA9BD,4BA8BC;AAEM,MAAM,cAAc,GAAG,CAAC,GAAa,EAAE,EAAE;IAC9C,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AAChF,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB","sourcesContent":["import { writeFile, readFile, mkdir } from 'fs/promises';\nimport { join } from 'path';\n\ntype Fixture = {\n  staticRoutes: string[];\n  dynamicRoutes: string[];\n  dynamicRouteTemplates: string[];\n};\n\nconst fixtures: Record<string, Fixture> = {\n  basic: {\n    staticRoutes: ['/apple', '/banana'],\n    dynamicRoutes: [\n      '/colors/${SingleRoutePart<T>}',\n      '/animals/${CatchAllRoutePart<T>}',\n      '/mix/${SingleRoutePart<T>}/${SingleRoutePart<T>}/${CatchAllRoutePart<T>}',\n    ],\n    dynamicRouteTemplates: [\n      '/colors/[color]',\n      '/animals/[...animal]',\n      '/mix/[fruit]/[color]/[...animals]',\n    ],\n  },\n};\n\nexport default async function () {\n  // await mkdir(join(__dirname, './fixtures/'), { force: true });\n  const template = await readFile(join(__dirname, '../../types/expo-router.d.ts'), 'utf8');\n  await Promise.all(\n    Object.entries(fixtures).map(async ([key, value]) => {\n      const types = template\n        // Swap from being a namespace to a module\n        .replace('declare namespace ExpoRouter {', '')\n        // Add the route values\n        .replace(\n          'type StaticRoutes = string;',\n          `type StaticRoutes = ${setToUnionType(value.staticRoutes)};`\n        )\n        .replace(\n          'type DynamicRoutes<T extends string> = string;',\n          `type DynamicRoutes<T extends string> = ${setToUnionType(value.dynamicRoutes)};`\n        )\n        .replace(\n          'type DynamicRouteTemplate = never;',\n          `type DynamicRouteTemplate = ${setToUnionType(value.dynamicRouteTemplates)};`\n        )\n        .replace(/\\}\\s+$/, '')\n        .replaceAll(/export const/g, 'export declare const')\n        .replaceAll(/export function/g, 'export declare function');\n\n      return writeFile(join(__dirname, './fixtures/', key + '.ts'), types);\n    })\n  );\n\n  console.log('done');\n}\n\nexport const setToUnionType = (set: string[]) => {\n  return set.length > 0 ? [...set].map((s) => `\\`${s}\\``).join(' | ') : 'never';\n};\n"]}