{"version":3,"file":"typed-routes.test.js","sourceRoot":"","sources":["../../src/__typetests__/typed-routes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expectType, expectError } from 'tsd-lite';\n\nimport {\n  useGlobalSearchParams,\n  useSegments,\n  useRouter,\n  useLocalSearchParams,\n} from './fixtures/basic';\n\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst router = useRouter();\n\ndescribe('router.push()', () => {\n  // router.push will return void when the type matches, otherwise it should error\n\n  describe('href', () => {\n    it('will error on non-urls', () => {\n      expectError(router.push('should-error'));\n    });\n\n    it('can accept an absolute url', () => {\n      expectType<void>(router.push('/apple'));\n      expectType<void>(router.push('/banana'));\n    });\n\n    it('can accept a ANY relative url', () => {\n      // We only type-check absolute urls\n      expectType<void>(router.push('./this/work/but/is/not/valid'));\n    });\n\n    it('works for dynamic urls', () => {\n      expectType<void>(router.push('/colors/blue'));\n    });\n\n    it('works for CatchAll routes', () => {\n      expectType<void>(router.push('/animals/bear'));\n      expectType<void>(router.push('/animals/bear/cat/dog'));\n      expectType<void>(router.push('/mix/apple/blue/cat/dog'));\n    });\n\n    it.skip('works for optional CatchAll routes', () => {\n      // CatchAll routes are not currently optional\n      // expectType<void>(router.push('/animals/'));\n    });\n\n    it('will error when providing extra parameters', () => {\n      expectError(router.push('/colors/blue/test'));\n    });\n\n    it('will error when providing too few parameters', () => {\n      expectError(router.push('/mix/apple'));\n      expectError(router.push('/mix/apple/cat'));\n    });\n\n    it('can accept any external url', () => {\n      expectType<void>(router.push('http://expo.dev'));\n    });\n  });\n\n  describe('HrefObject', () => {\n    it('will error on non-urls', () => {\n      expectError(router.push({ pathname: 'should-error' }));\n    });\n\n    it('can accept an absolute url', () => {\n      expectType<void>(router.push({ pathname: '/apple' }));\n      expectType<void>(router.push({ pathname: '/banana' }));\n    });\n\n    it('can accept a ANY relative url', () => {\n      // We only type-check absolute urls\n      expectType<void>(router.push({ pathname: './this/work/but/is/not/valid' }));\n    });\n\n    it('works for dynamic urls', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/colors/[color]',\n          params: { color: 'blue' },\n        })\n      );\n    });\n\n    it('requires a valid pathname', () => {\n      expectError(\n        router.push({\n          pathname: '/colors/[invalid]',\n          params: { color: 'blue' },\n        })\n      );\n    });\n\n    it('requires a valid param', () => {\n      expectError(\n        router.push({\n          pathname: '/colors/[color]',\n          params: { invalid: 'blue' },\n        })\n      );\n    });\n\n    it('works for catch all routes', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/animals/[...animal]',\n          params: { animal: ['cat', 'dog'] },\n        })\n      );\n    });\n\n    it('allows numeric inputs', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/mix/[fruit]/[color]/[...animals]',\n          params: { color: 1, fruit: 'apple', animals: [2, 'cat'] },\n        })\n      );\n    });\n\n    it('requires an array for catch all routes', () => {\n      expectError(\n        router.push({\n          pathname: '/animals/[...animal]',\n          params: { animal: 'cat' },\n        })\n      );\n    });\n\n    it('works for mixed routes', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/mix/[fruit]/[color]/[...animals]',\n          params: { color: 'red', fruit: 'apple', animals: [] },\n        })\n      );\n    });\n\n    it('requires all params in mixed routes', () => {\n      expectError(\n        router.push({\n          pathname: '/mix/[fruit]/[color]/[...animals]',\n          params: { color: 'red', animals: ['cat', 'dog'] },\n        })\n      );\n    });\n  });\n});\n\nit('useLocalSearchParams', () => {\n  expectType<Record<'color', string>>(useLocalSearchParams<Record<'color', string>>());\n  expectType<Record<'color', string> & Record<string, string | string[]>>(\n    useLocalSearchParams<'/colors/[color]'>()\n  );\n\n  expectError(useLocalSearchParams<'/invalid'>());\n  expectError(useLocalSearchParams<Record<'custom', Function>>());\n});\n\nit('useGlobalSearchParams', () => {\n  expectType<Record<'color', string>>(useGlobalSearchParams<Record<'color', string>>());\n  expectType<Record<'color', string> & Record<string, string | string[]>>(\n    useGlobalSearchParams<'/colors/[color]'>()\n  );\n\n  expectError(useGlobalSearchParams<'/invalid'>());\n  expectError(useGlobalSearchParams<Record<'custom', Function>>());\n});\n\ndescribe('useSegments', () => {\n  it('can accept an absolute url', () => {\n    expectType<['apple']>(useSegments<'/apple'>());\n  });\n\n  it('only accepts valid possible urls', () => {\n    expectError(useSegments<'/invalid'>());\n  });\n\n  it('can accept an array of segments', () => {\n    expectType<['apple']>(useSegments<['apple']>());\n  });\n\n  it('only accepts valid possible segments', () => {\n    expectError(useSegments<['invalid segment']>());\n  });\n});\n"]}